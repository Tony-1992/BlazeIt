@page "/authentication/login"
@layout LoginLayout
@inject AuthenticationService AuthService
@inject NavigationManager NavManager


<PageTitle>Login</PageTitle>
<MudText Typo="Typo.h4" GutterBottom="true">Sign In</MudText>
<MudText>Don't have an account? <MudLink Href="/authentication/register">Sign Up</MudLink></MudText>

<MudTextField T="string" 
    @bind-Value="@UserDetails.Email" 
    Label="E-mail" 
    Variant="Variant.Outlined" 
    Class="my-6">
</MudTextField>

<MudTextField @bind-Value="@UserDetails.Password" 
    Label="Password" 
    Variant="Variant.Outlined" 
    InputType="@PasswordInput" 
    Adornment="Adornment.End" 
    AdornmentIcon="@PasswordInputIcon" 
    OnAdornmentClick="TogglePasswordVisibility" />

<div Class="d-flex justify-space-between align-center">
    <MudCheckBox T="bool" 
        Label="Remember me?" 
        Color="Color.Primary" 
        Class="ml-n1 my-3">
    </MudCheckBox>
    <MudLink Href="/authentication/forgot-password">Forgot password?</MudLink>
</div>

<MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" FullWidth="true" OnClick=@AuthenticateDetails>Sign In</MudButton>
<MudButton Variant="Variant.Text" Color="Color.Secondary" Size="Size.Small" FullWidth="true" Class="mt-4" OnClick=@ToggleDummyDetails>@_dummyButtonMsg</MudButton>
@if (_showAlert)
{
    <MudAlert Severity=@alertSeverity Dense=true Class="mt-2"><b>"@alertMessage"</b></MudAlert>
}


@code {
    // Dummy account
    private bool _showDummyDetails = false;
    private string _dummyButtonMsg = "Use dummy account";
    private AuthenticationRequest UserDetails = new AuthenticationRequest();

    // Password
    private bool PasswordVisibility;
    private InputType PasswordInput = InputType.Password;
    private string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    // Alert
    private bool _showAlert = false;
    private Severity alertSeverity = Severity.Error;
    private string alertMessage = "No user was found with those credentials...";



    private void TogglePasswordVisibility()
    {
        @if (PasswordVisibility)
        {
            PasswordVisibility = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            PasswordVisibility = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private void AlertTest()
    {
        _showAlert = true;
        alertSeverity = Severity.Error;
        alertMessage = "No user was found with those credentials...";
        StateHasChanged();
    }

    private void ToggleDummyDetails()
    {
        _showDummyDetails = !_showDummyDetails;

        if (_showDummyDetails)
        {
            UserDetails = new AuthenticationRequest
            {
                Email = "test@test.com",
                Password = "Test12345"
            };
            _dummyButtonMsg = "Use my own account";

        } else
        {
            UserDetails = new AuthenticationRequest();
            _dummyButtonMsg = "Use dummy account";
        }
    }


    private async void AuthenticateDetails()
    {

        var result = await AuthService.AuthenticateDetils(UserDetails);
        if (result.Successful)
        {
            NavManager.NavigateTo("/");
        } else
        {
            AlertTest();
        }
    }
}
